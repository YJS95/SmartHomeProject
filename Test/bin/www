#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('test:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

//DB 연결
var mongoDB = require("mongodb").MongoClient;
var url = "mongodb://127.0.0.1:27017";
var dbObj=null;
mongoDB.connect(url, function(err, DB){
	
	console.log("DB Connected.......");
	dbObj = DB.db('iot')
	
});

//MQTT 서버 연결 IP주소는 내 IP주소로 변경
var mqtt = require("mqtt");
var client = mqtt.connect("mqtt://192.168.0.11");
client.on("connect", function(){
	client.subscribe("dht11");
	
});

//온습도 데이터 저장
client.on("message", function(topic, message){
	var obj=JSON.parse(message);
	obj.created_at=new Date();
	console.log(obj);
	
	var dht11 = dbObj.collection("dht11");
	dht11.save(obj, function(err, result){
		if(err) console.log(err);
		else console.log(JSON.stringify(result));
		
	});
});

// 소켓 통신 클라이언트에게 요청을 받아서 DB에서 데이터를 가져와서 클라이언트에게 전송
var io = require("socket.io")(server);
io.on("connection", function(socket){
	socket.on("socket_evt_mqtt", function(data){
		var dht11 = dbObj.collection("dht11");
		dht11.find({}).sort({_id:-1}).limit(1).toArray(function(err, results){
			if(!err){
				socket.emit("socket_evt_mqtt", JSON.stringify(results[0]));
				
			}
			
		});
	});
		socket.on("socket_evt_led", function(data){ 
		       var obj=JSON.parse(data);
		       client.publish("led", o;
		       
		       
		       
		       
		       
		       
		       
		       
		       
		       
		       
		       
		       
		       
		       
		       
		       
		       
		       
		       
		       
		       ++"");	
		
	});
	
});





/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
